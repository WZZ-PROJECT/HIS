{"remainingRequest":"E:\\XM\\his-shopping-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\XM\\his-shopping-web\\src\\views\\mall\\issue.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\XM\\his-shopping-web\\src\\views\\mall\\issue.vue","mtime":1606183812552},{"path":"E:\\XM\\his-shopping-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\XM\\his-shopping-web\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"E:\\XM\\his-shopping-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\XM\\his-shopping-web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { listIssue, createIssue, updateIssue, deleteIssue } from '@/api/issue'\r\nimport Pagination from '@/components/Pagination' // Secondary package based on el-pagination\r\n\r\nexport default {\r\n  name: 'Issue',\r\n  components: { Pagination },\r\n  data() {\r\n    return {\r\n      list: null,\r\n      total: 0,\r\n      listLoading: true,\r\n      listQuery: {\r\n        page: 1,\r\n        limit: 20,\r\n        question: undefined,\r\n        sort: 'add_time',\r\n        order: 'desc'\r\n      },\r\n      dataForm: {\r\n        id: undefined,\r\n        question: '',\r\n        answer: ''\r\n      },\r\n      dialogFormVisible: false,\r\n      dialogStatus: '',\r\n      textMap: {\r\n        update: '编辑',\r\n        create: '创建'\r\n      },\r\n      rules: {\r\n        question: [{ required: true, message: '问题不能为空', trigger: 'blur' }],\r\n        answer: [{ required: true, message: '回复不能为空', trigger: 'blur' }]\r\n      },\r\n      downloadLoading: false\r\n    }\r\n  },\r\n  created() {\r\n    this.getList()\r\n  },\r\n  methods: {\r\n    getList() {\r\n      this.listLoading = true\r\n      listIssue(this.listQuery).then(response => {\r\n        this.list = response.data.data.list\r\n        this.total = response.data.data.total\r\n        this.listLoading = false\r\n      }).catch(() => {\r\n        this.list = []\r\n        this.total = 0\r\n        this.listLoading = false\r\n      })\r\n    },\r\n    handleFilter() {\r\n      this.listQuery.page = 1\r\n      this.getList()\r\n    },\r\n    resetForm() {\r\n      this.dataForm = {\r\n        id: undefined,\r\n        question: '',\r\n        answer: ''\r\n      }\r\n    },\r\n    handleCreate() {\r\n      this.resetForm()\r\n      this.dialogStatus = 'create'\r\n      this.dialogFormVisible = true\r\n      this.$nextTick(() => {\r\n        this.$refs['dataForm'].clearValidate()\r\n      })\r\n    },\r\n    createData() {\r\n      this.$refs['dataForm'].validate((valid) => {\r\n        if (valid) {\r\n          createIssue(this.dataForm).then(response => {\r\n            this.list.unshift(response.data.data)\r\n            this.dialogFormVisible = false\r\n            this.$notify.success({\r\n              title: '成功',\r\n              message: '创建成功'\r\n            })\r\n          }).catch(response => {\r\n            this.$notify.error({\r\n              title: '失败',\r\n              message: response.data.errmsg\r\n            })\r\n          })\r\n        }\r\n      })\r\n    },\r\n    handleUpdate(row) {\r\n      this.dataForm = Object.assign({}, row)\r\n      this.dialogStatus = 'update'\r\n      this.dialogFormVisible = true\r\n      this.$nextTick(() => {\r\n        this.$refs['dataForm'].clearValidate()\r\n      })\r\n    },\r\n    updateData() {\r\n      this.$refs['dataForm'].validate((valid) => {\r\n        if (valid) {\r\n          updateIssue(this.dataForm).then(() => {\r\n            for (const v of this.list) {\r\n              if (v.id === this.dataForm.id) {\r\n                const index = this.list.indexOf(v)\r\n                this.list.splice(index, 1, this.dataForm)\r\n                break\r\n              }\r\n            }\r\n            this.dialogFormVisible = false\r\n            this.$notify.success({\r\n              title: '成功',\r\n              message: '更新成功'\r\n            })\r\n          }).catch(response => {\r\n            this.$notify.error({\r\n              title: '失败',\r\n              message: response.data.errmsg\r\n            })\r\n          })\r\n        }\r\n      })\r\n    },\r\n    handleDelete(row) {\r\n      deleteIssue(row).then(response => {\r\n        this.$notify.success({\r\n          title: '成功',\r\n          message: '删除成功'\r\n        })\r\n        this.getList()\r\n      }).catch(response => {\r\n        this.$notify.error({\r\n          title: '失败',\r\n          message: response.data.errmsg\r\n        })\r\n      })\r\n    },\r\n    handleDownload() {\r\n      this.downloadLoading = true\r\n      import('@/vendor/Export2Excel').then(excel => {\r\n        const tHeader = ['问题ID', '问题内容', '问题回复']\r\n        const filterVal = ['id', 'question', 'answer']\r\n        excel.export_json_to_excel2(tHeader, this.list, filterVal, '常见问题信息')\r\n        this.downloadLoading = false\r\n      })\r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["issue.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkfile":"issue.vue","sourceRoot":"src/views/mall","sourcesContent":["<template>\r\n  <div class=\"app-container\">\r\n\r\n    <!-- 查询和其他操作 -->\r\n    <div class=\"filter-container\">\r\n      <el-input v-model=\"listQuery.question\" clearable class=\"filter-item\" style=\"width: 200px;\" placeholder=\"请输入问题\" />\r\n      <el-button v-permission=\"['GET /admin/issue/list']\" class=\"filter-item\" type=\"primary\" icon=\"el-icon-search\" @click=\"handleFilter\">查找</el-button>\r\n      <el-button v-permission=\"['POST /admin/issue/create']\" class=\"filter-item\" type=\"primary\" icon=\"el-icon-edit\" @click=\"handleCreate\">添加</el-button>\r\n      <el-button :loading=\"downloadLoading\" class=\"filter-item\" type=\"primary\" icon=\"el-icon-download\" @click=\"handleDownload\">导出</el-button>\r\n    </div>\r\n\r\n    <!-- 查询结果 -->\r\n    <el-table v-loading=\"listLoading\" :data=\"list\" element-loading-text=\"正在查询中。。。\" border fit highlight-current-row>\r\n      <el-table-column align=\"center\" width=\"100px\" label=\"问题ID\" prop=\"id\" sortable />\r\n\r\n      <el-table-column align=\"center\" min-width=\"200px\" label=\"问题内容\" prop=\"question\" />\r\n\r\n      <el-table-column align=\"center\" min-width=\"400px\" label=\"问题回复\" prop=\"answer\" />\r\n\r\n      <el-table-column align=\"center\" label=\"操作\" width=\"250\" class-name=\"small-padding fixed-width\">\r\n        <template slot-scope=\"scope\">\r\n          <el-button v-permission=\"['POST /admin/issue/update']\" type=\"primary\" size=\"mini\" @click=\"handleUpdate(scope.row)\">编辑</el-button>\r\n          <el-button v-permission=\"['POST /admin/issue/delete']\" type=\"danger\" size=\"mini\" @click=\"handleDelete(scope.row)\">删除</el-button>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n\r\n    <pagination v-show=\"total>0\" :total=\"total\" :page.sync=\"listQuery.page\" :limit.sync=\"listQuery.limit\" @pagination=\"getList\" />\r\n\r\n    <!-- 添加或修改对话框 -->\r\n    <el-dialog :title=\"textMap[dialogStatus]\" :visible.sync=\"dialogFormVisible\">\r\n      <el-form ref=\"dataForm\" :rules=\"rules\" :model=\"dataForm\" status-icon label-position=\"left\" label-width=\"100px\" style=\"width: 400px; margin-left:50px;\">\r\n        <el-form-item label=\"问题\" prop=\"question\">\r\n          <el-input v-model=\"dataForm.question\" />\r\n        </el-form-item>\r\n        <el-form-item label=\"回复\" prop=\"answer\">\r\n          <el-input v-model=\"dataForm.answer\" :rows=\"8\" type=\"textarea\" placeholder=\"请输入内容\" />\r\n        </el-form-item>\r\n      </el-form>\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"dialogFormVisible = false\">取消</el-button>\r\n        <el-button v-if=\"dialogStatus=='create'\" type=\"primary\" @click=\"createData\">确定</el-button>\r\n        <el-button v-else type=\"primary\" @click=\"updateData\">确定</el-button>\r\n      </div>\r\n    </el-dialog>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { listIssue, createIssue, updateIssue, deleteIssue } from '@/api/issue'\r\nimport Pagination from '@/components/Pagination' // Secondary package based on el-pagination\r\n\r\nexport default {\r\n  name: 'Issue',\r\n  components: { Pagination },\r\n  data() {\r\n    return {\r\n      list: null,\r\n      total: 0,\r\n      listLoading: true,\r\n      listQuery: {\r\n        page: 1,\r\n        limit: 20,\r\n        question: undefined,\r\n        sort: 'add_time',\r\n        order: 'desc'\r\n      },\r\n      dataForm: {\r\n        id: undefined,\r\n        question: '',\r\n        answer: ''\r\n      },\r\n      dialogFormVisible: false,\r\n      dialogStatus: '',\r\n      textMap: {\r\n        update: '编辑',\r\n        create: '创建'\r\n      },\r\n      rules: {\r\n        question: [{ required: true, message: '问题不能为空', trigger: 'blur' }],\r\n        answer: [{ required: true, message: '回复不能为空', trigger: 'blur' }]\r\n      },\r\n      downloadLoading: false\r\n    }\r\n  },\r\n  created() {\r\n    this.getList()\r\n  },\r\n  methods: {\r\n    getList() {\r\n      this.listLoading = true\r\n      listIssue(this.listQuery).then(response => {\r\n        this.list = response.data.data.list\r\n        this.total = response.data.data.total\r\n        this.listLoading = false\r\n      }).catch(() => {\r\n        this.list = []\r\n        this.total = 0\r\n        this.listLoading = false\r\n      })\r\n    },\r\n    handleFilter() {\r\n      this.listQuery.page = 1\r\n      this.getList()\r\n    },\r\n    resetForm() {\r\n      this.dataForm = {\r\n        id: undefined,\r\n        question: '',\r\n        answer: ''\r\n      }\r\n    },\r\n    handleCreate() {\r\n      this.resetForm()\r\n      this.dialogStatus = 'create'\r\n      this.dialogFormVisible = true\r\n      this.$nextTick(() => {\r\n        this.$refs['dataForm'].clearValidate()\r\n      })\r\n    },\r\n    createData() {\r\n      this.$refs['dataForm'].validate((valid) => {\r\n        if (valid) {\r\n          createIssue(this.dataForm).then(response => {\r\n            this.list.unshift(response.data.data)\r\n            this.dialogFormVisible = false\r\n            this.$notify.success({\r\n              title: '成功',\r\n              message: '创建成功'\r\n            })\r\n          }).catch(response => {\r\n            this.$notify.error({\r\n              title: '失败',\r\n              message: response.data.errmsg\r\n            })\r\n          })\r\n        }\r\n      })\r\n    },\r\n    handleUpdate(row) {\r\n      this.dataForm = Object.assign({}, row)\r\n      this.dialogStatus = 'update'\r\n      this.dialogFormVisible = true\r\n      this.$nextTick(() => {\r\n        this.$refs['dataForm'].clearValidate()\r\n      })\r\n    },\r\n    updateData() {\r\n      this.$refs['dataForm'].validate((valid) => {\r\n        if (valid) {\r\n          updateIssue(this.dataForm).then(() => {\r\n            for (const v of this.list) {\r\n              if (v.id === this.dataForm.id) {\r\n                const index = this.list.indexOf(v)\r\n                this.list.splice(index, 1, this.dataForm)\r\n                break\r\n              }\r\n            }\r\n            this.dialogFormVisible = false\r\n            this.$notify.success({\r\n              title: '成功',\r\n              message: '更新成功'\r\n            })\r\n          }).catch(response => {\r\n            this.$notify.error({\r\n              title: '失败',\r\n              message: response.data.errmsg\r\n            })\r\n          })\r\n        }\r\n      })\r\n    },\r\n    handleDelete(row) {\r\n      deleteIssue(row).then(response => {\r\n        this.$notify.success({\r\n          title: '成功',\r\n          message: '删除成功'\r\n        })\r\n        this.getList()\r\n      }).catch(response => {\r\n        this.$notify.error({\r\n          title: '失败',\r\n          message: response.data.errmsg\r\n        })\r\n      })\r\n    },\r\n    handleDownload() {\r\n      this.downloadLoading = true\r\n      import('@/vendor/Export2Excel').then(excel => {\r\n        const tHeader = ['问题ID', '问题内容', '问题回复']\r\n        const filterVal = ['id', 'question', 'answer']\r\n        excel.export_json_to_excel2(tHeader, this.list, filterVal, '常见问题信息')\r\n        this.downloadLoading = false\r\n      })\r\n    }\r\n  }\r\n}\r\n</script>\r\n"]}]}