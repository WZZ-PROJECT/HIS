{"remainingRequest":"E:\\XM\\his-shopping-web\\node_modules\\babel-loader\\lib\\index.js!E:\\XM\\his-shopping-web\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\XM\\his-shopping-web\\src\\utils\\request.js","dependencies":[{"path":"E:\\XM\\his-shopping-web\\src\\utils\\request.js","mtime":1606183812536},{"path":"E:\\XM\\his-shopping-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\XM\\his-shopping-web\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"E:\\XM\\his-shopping-web\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"E:/XM/his-shopping-web/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _axios = _interopRequireDefault(require(\"axios\"));\n\nvar _elementUi = require(\"element-ui\");\n\nvar _store = _interopRequireDefault(require(\"@/store\"));\n\nvar _auth = require(\"@/utils/auth\");\n\n// create an axios instance\nvar service = _axios.default.create({\n  baseURL: process.env.VUE_APP_BASE_API,\n  // api 的 base_url\n  timeout: 5000 // request timeout\n\n}); // request interceptor\n\n\nservice.interceptors.request.use(function (config) {\n  // Do something before request is sent\n  if (_store.default.getters.token) {\n    // 让每个请求携带token-- ['X-Litemall-Admin-Token']为自定义key 请根据实际情况自行修改\n    config.headers['X-Litemall-Admin-Token'] = (0, _auth.getToken)();\n  }\n\n  return config;\n}, function (error) {\n  // Do something with request error\n  console.log(error); // for debug\n\n  Promise.reject(error);\n}); // response interceptor\n\nservice.interceptors.response.use(function (response) {\n  var res = response.data;\n\n  if (res.errno === 501) {\n    _elementUi.MessageBox.alert('系统未登录，请重新登录', '错误', {\n      confirmButtonText: '确定',\n      type: 'error'\n    }).then(function () {\n      _store.default.dispatch('FedLogOut').then(function () {\n        location.reload();\n      });\n    });\n\n    return Promise.reject('error');\n  } else if (res.errno === 502) {\n    _elementUi.MessageBox.alert('系统内部错误，请联系管理员维护', '错误', {\n      confirmButtonText: '确定',\n      type: 'error'\n    });\n\n    return Promise.reject('error');\n  } else if (res.errno === 503) {\n    _elementUi.MessageBox.alert('请求业务目前未支持', '警告', {\n      confirmButtonText: '确定',\n      type: 'error'\n    });\n\n    return Promise.reject('error');\n  } else if (res.errno === 504) {\n    _elementUi.MessageBox.alert('更新数据已经失效，请刷新页面重新操作', '警告', {\n      confirmButtonText: '确定',\n      type: 'error'\n    });\n\n    return Promise.reject('error');\n  } else if (res.errno === 505) {\n    _elementUi.MessageBox.alert('更新失败，请再尝试一次', '警告', {\n      confirmButtonText: '确定',\n      type: 'error'\n    });\n\n    return Promise.reject('error');\n  } else if (res.errno === 506) {\n    _elementUi.MessageBox.alert('没有操作权限，请联系管理员授权', '错误', {\n      confirmButtonText: '确定',\n      type: 'error'\n    });\n\n    return Promise.reject('error');\n  } else if (res.errno !== 0) {\n    // 非5xx的错误属于业务错误，留给具体页面处理\n    return Promise.reject(response);\n  } else {\n    return response;\n  }\n}, function (error) {\n  console.log('err' + error); // for debug\n\n  (0, _elementUi.Message)({\n    message: '登录连接超时（后台不能连接，请联系系统管理员）',\n    type: 'error',\n    duration: 5 * 1000\n  });\n  return Promise.reject(error);\n});\nvar _default = service;\nexports.default = _default;",{"version":3,"sources":["E:/XM/his-shopping-web/src/utils/request.js"],"names":["service","axios","create","baseURL","process","env","VUE_APP_BASE_API","timeout","interceptors","request","use","config","store","getters","token","headers","error","console","log","Promise","reject","response","res","data","errno","MessageBox","alert","confirmButtonText","type","then","dispatch","location","reload","message","duration"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport { Message, MessageBox } from 'element-ui'\r\nimport store from '@/store'\r\nimport { getToken } from '@/utils/auth'\r\n\r\n// create an axios instance\r\nconst service = axios.create({\r\n  baseURL: process.env.VUE_APP_BASE_API, // api 的 base_url\r\n  timeout: 5000 // request timeout\r\n})\r\n\r\n// request interceptor\r\nservice.interceptors.request.use(\r\n  config => {\r\n    // Do something before request is sent\r\n    if (store.getters.token) {\r\n      // 让每个请求携带token-- ['X-Litemall-Admin-Token']为自定义key 请根据实际情况自行修改\r\n      config.headers['X-Litemall-Admin-Token'] = getToken()\r\n    }\r\n    return config\r\n  },\r\n  error => {\r\n    // Do something with request error\r\n    console.log(error) // for debug\r\n    Promise.reject(error)\r\n  }\r\n)\r\n\r\n// response interceptor\r\nservice.interceptors.response.use(\r\n  response => {\r\n    const res = response.data\r\n\r\n    if (res.errno === 501) {\r\n      MessageBox.alert('系统未登录，请重新登录', '错误', {\r\n        confirmButtonText: '确定',\r\n        type: 'error'\r\n      }).then(() => {\r\n        store.dispatch('FedLogOut').then(() => {\r\n          location.reload()\r\n        })\r\n      })\r\n      return Promise.reject('error')\r\n    } else if (res.errno === 502) {\r\n      MessageBox.alert('系统内部错误，请联系管理员维护', '错误', {\r\n        confirmButtonText: '确定',\r\n        type: 'error'\r\n      })\r\n      return Promise.reject('error')\r\n    } else if (res.errno === 503) {\r\n      MessageBox.alert('请求业务目前未支持', '警告', {\r\n        confirmButtonText: '确定',\r\n        type: 'error'\r\n      })\r\n      return Promise.reject('error')\r\n    } else if (res.errno === 504) {\r\n      MessageBox.alert('更新数据已经失效，请刷新页面重新操作', '警告', {\r\n        confirmButtonText: '确定',\r\n        type: 'error'\r\n      })\r\n      return Promise.reject('error')\r\n    } else if (res.errno === 505) {\r\n      MessageBox.alert('更新失败，请再尝试一次', '警告', {\r\n        confirmButtonText: '确定',\r\n        type: 'error'\r\n      })\r\n      return Promise.reject('error')\r\n    } else if (res.errno === 506) {\r\n      MessageBox.alert('没有操作权限，请联系管理员授权', '错误', {\r\n        confirmButtonText: '确定',\r\n        type: 'error'\r\n      })\r\n      return Promise.reject('error')\r\n    } else if (res.errno !== 0) {\r\n      // 非5xx的错误属于业务错误，留给具体页面处理\r\n      return Promise.reject(response)\r\n    } else {\r\n      return response\r\n    }\r\n  }, error => {\r\n    console.log('err' + error)// for debug\r\n    Message({\r\n      message: '登录连接超时（后台不能连接，请联系系统管理员）',\r\n      type: 'error',\r\n      duration: 5 * 1000\r\n    })\r\n    return Promise.reject(error)\r\n  })\r\n\r\nexport default service\r\n"]}]}