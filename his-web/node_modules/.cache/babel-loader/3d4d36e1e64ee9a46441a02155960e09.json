{"remainingRequest":"F:\\XM\\his-web\\node_modules\\thread-loader\\dist\\cjs.js!F:\\XM\\his-web\\node_modules\\babel-loader\\lib\\index.js!F:\\XM\\his-web\\src\\filters\\index.js","dependencies":[{"path":"F:\\XM\\his-web\\src\\filters\\index.js","mtime":1600936446103},{"path":"F:\\XM\\his-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1600936410370},{"path":"F:\\XM\\his-web\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1600936436646},{"path":"F:\\XM\\his-web\\node_modules\\babel-loader\\lib\\index.js","mtime":1600936408645}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.number.constructor\";\n// import parseTime, formatTime and set to filter\nexport { parseTime, formatTime } from '@/utils';\n/**\r\n * Show plural label if time is plural number\r\n * @param {number} time\r\n * @param {string} label\r\n * @return {string}\r\n */\n\nfunction pluralize(time, label) {\n  if (time === 1) {\n    return time + label;\n  }\n\n  return time + label + 's';\n}\n/**\r\n * @param {number} time\r\n */\n\n\nexport function timeAgo(time) {\n  var between = Date.now() / 1000 - Number(time);\n\n  if (between < 3600) {\n    return pluralize(~~(between / 60), ' minute');\n  } else if (between < 86400) {\n    return pluralize(~~(between / 3600), ' hour');\n  } else {\n    return pluralize(~~(between / 86400), ' day');\n  }\n}\n/**\r\n * Number formatting\r\n * like 10000 => 10k\r\n * @param {number} num\r\n * @param {number} digits\r\n */\n\nexport function numberFormatter(num, digits) {\n  var si = [{\n    value: 1E18,\n    symbol: 'E'\n  }, {\n    value: 1E15,\n    symbol: 'P'\n  }, {\n    value: 1E12,\n    symbol: 'T'\n  }, {\n    value: 1E9,\n    symbol: 'G'\n  }, {\n    value: 1E6,\n    symbol: 'M'\n  }, {\n    value: 1E3,\n    symbol: 'k'\n  }];\n\n  for (var i = 0; i < si.length; i++) {\n    if (num >= si[i].value) {\n      return (num / si[i].value + 0.1).toFixed(digits).replace(/\\.0+$|(\\.[0-9]*[1-9])0+$/, '$1') + si[i].symbol;\n    }\n  }\n\n  return num.toString();\n}\n/**\r\n * 10000 => \"10,000\"\r\n * @param {number} num\r\n */\n\nexport function toThousandFilter(num) {\n  return (+num || 0).toString().replace(/^-?\\d+/g, function (m) {\n    return m.replace(/(?=(?!\\b)(\\d{3})+$)/g, ',');\n  });\n}\n/**\r\n * Upper case first char\r\n * @param {String} string\r\n */\n\nexport function uppercaseFirst(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}",null]}