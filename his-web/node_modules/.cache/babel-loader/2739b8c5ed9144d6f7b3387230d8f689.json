{"remainingRequest":"F:\\XM\\his-web\\node_modules\\thread-loader\\dist\\cjs.js!F:\\XM\\his-web\\node_modules\\babel-loader\\lib\\index.js!F:\\XM\\his-web\\src\\utils\\request.js","dependencies":[{"path":"F:\\XM\\his-web\\src\\utils\\request.js","mtime":1600936446187},{"path":"F:\\XM\\his-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1600936410370},{"path":"F:\\XM\\his-web\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1600936436646},{"path":"F:\\XM\\his-web\\node_modules\\babel-loader\\lib\\index.js","mtime":1600936408645}],"contextDependencies":[],"result":["import axios from 'axios';\nimport { MessageBox, Message } from 'element-ui';\nimport store from '@/store';\nimport { getToken } from '@/utils/auth'; // 创建一个axios实例 封装所有api调用\n\nvar service = axios.create({\n  baseURL: process.env.VUE_APP_BASE_API,\n  // url = base url + request url\n  withCredentials: true,\n  // 发送请求时携带token\n  timeout: 5000 // 请求超时实践\n\n}); // request拦截器\n\nservice.interceptors.request.use(function (config) {\n  if (store.getters.token) {\n    // 在头部Authorization携带token，以供后端验证\n    config.headers['Authorization'] = getToken();\n  }\n\n  return config;\n}, function (error) {\n  // 打印错误信息\n  console.log(error); // for debug\n\n  return Promise.reject(error);\n}); // response拦截器\n\nservice.interceptors.response.use(function (response) {\n  var res = response.data;\n\n  if (res.code !== 20000 && res.code !== 200) {\n    // Message({\n    //   message: res.message || 'error',\n    //   type: 'error',\n    //   duration: 5 * 1000\n    // })\n    // if(res.code==500){\n    //   Message({\n    //     message: res.message || 'error',\n    //     type: 'error',\n    //     duration: 5 * 1000\n    //   })\n    // }\n    // 50008: Illegal token; 50012: Other clients logged in; 50014: Token expired;\n    if (res.code === 50008 || res.code === 50012 || res.code === 50014) {\n      // 重新登录\n      MessageBox.confirm('你已经登出，请重新登录！', '确认登出', {\n        confirmButtonText: 'Re-Login',\n        cancelButtonText: 'Cancel',\n        type: 'warning'\n      }).then(function () {\n        store.dispatch('user/resetToken').then(function () {\n          location.reload();\n        });\n      });\n    }\n\n    return Promise.reject(res.message || 'error');\n  } else {\n    return res;\n  }\n}, function (error) {\n  console.log('err' + error); // for debug\n  // Message({\n  //   message: error.message,\n  //   type: 'error',\n  //   duration: 5 * 1000\n  // })\n\n  return Promise.reject(error);\n});\nexport default service;",null]}