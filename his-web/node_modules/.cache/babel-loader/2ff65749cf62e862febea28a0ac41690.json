{"remainingRequest":"F:\\XM\\his-web\\node_modules\\thread-loader\\dist\\cjs.js!F:\\XM\\his-web\\node_modules\\babel-loader\\lib\\index.js!F:\\XM\\his-web\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\XM\\his-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\XM\\his-web\\src\\views\\outpatient\\workstation\\historyPrescription.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\XM\\his-web\\src\\views\\outpatient\\workstation\\historyPrescription.vue","mtime":1602056307735},{"path":"F:\\XM\\his-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1600936410370},{"path":"F:\\XM\\his-web\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1600936436646},{"path":"F:\\XM\\his-web\\node_modules\\babel-loader\\lib\\index.js","mtime":1600936408645},{"path":"F:\\XM\\his-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1600936410370},{"path":"F:\\XM\\his-web\\node_modules\\vue-loader\\lib\\index.js","mtime":1600936442292}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"F:/XM/his-web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getdrugList as _getdrugList, selectById } from '@/api/drug';\nimport Pagination from '@/components/Pagination';\nimport { apply as _apply, listByReg as _listByReg, invalid as _invalid } from '@/api/outpatient/prescription';\nimport { deepClone } from '@/utils';\nimport { selectByType } from '@/api/outpatient/frequentuse';\nimport { getDrugPrescription as _getDrugPrescription, saveDrugPrescription as _saveDrugPrescription } from '@/api/outpatient/save';\nimport { listModel as _listModel } from '@/api/drugmodel';\nvar defaultpre = {\n  name: '',\n  druglist: [],\n  amount: 0,\n  status: -1\n};\nexport default {\n  props: ['patient'],\n  components: {\n    Pagination: Pagination\n  },\n  name: 'Prescription',\n  data: function data() {\n    return {\n      modelvisivle: false,\n      model: {},\n      models: [],\n      freqlist: [],\n      refs: [],\n      prescriptionList: [],\n      oneprescription: {\n        name: '',\n        druglist: [],\n        amount: 0,\n        status: -1\n      },\n      edit: false,\n      test: '',\n      num: 0,\n      dialogTableVisible: false,\n      activeName: 'first',\n      isclose: true,\n      record: {\n        main: 'test'\n      },\n      page: {\n        pageNum: 1,\n        pageSize: 10\n      },\n      searchdrug: '',\n      drugList: [],\n      total: 0,\n      mainwidth: \"65%\",\n      activeNames: ['1'],\n      data2: [{\n        date: '0001',\n        name: '王小虎1',\n        address: '38'\n      }, {\n        date: '0002',\n        name: '王小虎2',\n        address: '39'\n      }]\n    };\n  },\n  watch: {\n    'patient': function patient(newVal, oldVal) {\n      this.patient = newVal;\n      this.listByReg();\n    }\n  },\n  created: function created() {\n    this.listModel();\n  },\n  methods: {\n    addmodel: function addmodel(val) {\n      val.amount = Math.floor((val.amount + 0.5) * 100) / 100;\n      val.status = -1;\n      this.prescriptionList.push(val);\n    },\n    selectmodel: function selectmodel(val) {\n      console.log(val);\n      this.model = deepClone(val);\n      this.model.amount = Math.floor((this.model.amount + 0.5) * 100) / 100;\n      this.modelvisivle = true;\n    },\n    listModel: function listModel() {\n      var _this = this;\n\n      var data = {};\n      data.scope = 0;\n      data.ownId = this.$store.getters.id;\n      data.type = 1;\n      data.pageSize = 1000;\n      data.pageNum = 1;\n      data.isAdmin = 0;\n\n      _listModel(data).then(function (res) {\n        _this.models = res.data.list;\n\n        _this.models.forEach(function (model) {\n          model.druglist = [];\n          model.amount = 0;\n          model.dmsMedicineModelItemList.forEach(function (item) {\n            var data = {};\n            selectById(item.id).then(function (res) {\n              data = res.data;\n              data.days = item.days;\n              data.frequency = item.frequency;\n              data.medicalAdvice = item.medicalAdvice;\n              data.medicineUsage = item.medicineUsage;\n              data.usageMeans = item.usageMeans;\n              data.num = item.num;\n              data.usageNum = item.usageNum;\n              data.usageNumUnit = item.usageNumUnit;\n              model.amount += data.price * item.num;\n              model.druglist.push(deepClone(data));\n            });\n          });\n          model.amount = Math.floor((model.amount + 0.5) * 100) / 100;\n        });\n      });\n    },\n    saveDrugPrescription: function saveDrugPrescription() {\n      var _this2 = this;\n\n      _saveDrugPrescription(this.refs, this.patient.registrationId, 4).then(function (res) {\n        _this2.$notify({\n          title: '成功',\n          message: '已暂存选中的成药处方',\n          type: 'success',\n          duration: 2000\n        });\n      });\n    },\n    getDrugPrescription: function getDrugPrescription() {\n      var _this3 = this;\n\n      var data = {};\n      data.registrationId = this.patient.registrationId;\n      data.type = 4;\n\n      _getDrugPrescription(data).then(function (res) {\n        console.log(res.data);\n\n        _this3.prescriptionList.push(JSON.stringify(res.data));\n      });\n    },\n    addfreitem: function addfreitem(val) {\n      this.selectCheck(val);\n    },\n    getfreqList: function getfreqList() {\n      var _this4 = this;\n\n      var data = {};\n      data.staffId = this.$store.getters.id;\n      data.selectType = 6;\n      selectByType(data).then(function (res) {\n        _this4.freqlist = res.data.drugList.filter(function (item) {\n          if (item.typeId === 101) return true;\n        });\n      });\n    },\n    refresh: function refresh() {\n      var _this5 = this;\n\n      this.$confirm('未开立的处方都将清除,确认刷新?', '刷新', {\n        confirmButtonText: '确认',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(function () {\n        _this5.listByReg();\n      });\n    },\n    deletepre: function deletepre() {\n      var data = this.refs[0].name;\n      this.prescriptionList = this.prescriptionList.filter(function (item) {\n        if (item.name === data) return false;\n        return true;\n      });\n    },\n    invalid: function invalid() {\n      var _this6 = this;\n\n      var data = this.refs[0].id;\n\n      _invalid(data).then(function (res) {\n        _this6.$notify({\n          title: '成功',\n          message: res.message,\n          type: 'success',\n          duration: 2000\n        });\n\n        _this6.listByReg();\n      });\n    },\n    listByReg: function () {\n      var _listByReg2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _this7 = this;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _listByReg(this.patient.registrationId).then(function (res) {\n                  _this7.prescriptionList = res.data;\n                });\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function listByReg() {\n        return _listByReg2.apply(this, arguments);\n      }\n\n      return listByReg;\n    }(),\n    handleSelectionChange: function handleSelectionChange(val) {\n      this.refs = val;\n    },\n    apply: function () {\n      var _apply2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var _this8 = this;\n\n        var data;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                data = this.refs[0];\n                data.createStaffId = this.$store.getters.id;\n                data.registrationId = this.patient.registrationId;\n                data.dmsMedicineItemRecordList = data.druglist;\n                data.dmsMedicineItemRecordList.forEach(function (item) {\n                  item.drugId = item.id;\n                });\n\n                _apply(data).then(function (res) {\n                  _this8.$notify({\n                    title: '成功',\n                    message: res.message,\n                    type: 'success',\n                    duration: 2000\n                  });\n\n                  _this8.listByReg();\n                });\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function apply() {\n        return _apply2.apply(this, arguments);\n      }\n\n      return apply;\n    }(),\n    createpre: function createpre() {\n      this.edit = false;\n      this.prescriptionList.push(this.oneprescription);\n      this.dialogTableVisible = false;\n    },\n    changepre: function changepre() {\n      this.dialogTableVisible = false;\n    },\n    changenum: function changenum(val) {\n      var _this9 = this;\n\n      this.oneprescription.amount = 0;\n      this.oneprescription.druglist.forEach(function (item) {\n        _this9.oneprescription.amount += item.price * item.num;\n      });\n      this.oneprescription.amount = Math.floor((this.oneprescription.amount + 0.5) * 100) / 100;\n    },\n    deldrug: function deldrug(row) {\n      this.oneprescription.druglist = this.oneprescription.druglist.filter(function (item) {\n        if (item.id === row.id) return false;\n        return true;\n      });\n    },\n    choosedrug: function choosedrug(val) {\n      var flag = 1;\n      this.oneprescription.druglist.forEach(function (item) {\n        if (item.id === val.id) {\n          item.num += 1;\n          flag = 0;\n        }\n      });\n\n      if (flag) {\n        this.oneprescription.amount += val.price;\n        this.oneprescription.amount = Math.floor((this.oneprescription.amount + 0.5) * 100) / 100;\n        this.oneprescription.druglist.push(val);\n        this.oneprescription.druglist.forEach(function (item) {\n          if (item.num === undefined) item.num = 1;\n        });\n      }\n    },\n    getdrugList: function () {\n      var _getdrugList2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        var data, response;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                data = {};\n                data.pageSize = this.page.pageSize;\n                data.pageNum = this.page.pageNum;\n                data.status = 1;\n                data.typeId = 101;\n                data.name = this.searchdrug;\n                _context3.next = 8;\n                return _getdrugList(data);\n\n              case 8:\n                response = _context3.sent;\n                this.drugList = response.data.list;\n                this.total = response.data.total;\n\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getdrugList() {\n        return _getdrugList2.apply(this, arguments);\n      }\n\n      return getdrugList;\n    }(),\n    addpre: function addpre() {\n      this.getfreqList();\n      this.edit = false;\n      this.oneprescription = deepClone(defaultpre);\n      this.getdrugList();\n      this.dialogTableVisible = true;\n    },\n    showDetail: function showDetail(row) {\n      this.edit = true;\n      this.oneprescription = row;\n      this.dialogTableVisible = true;\n    },\n    controlfast: function controlfast() {\n      this.isclose = !this.isclose;\n      if (this.mainwidth === \"65%\") this.mainwidth = \"80%\";else this.mainwidth = \"65%\";\n    }\n  }\n};",null]}