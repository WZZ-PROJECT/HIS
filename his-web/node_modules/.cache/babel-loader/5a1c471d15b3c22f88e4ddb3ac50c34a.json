{"remainingRequest":"F:\\XM\\his-web\\node_modules\\babel-loader\\lib\\index.js!F:\\XM\\his-web\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\XM\\his-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\XM\\his-web\\src\\views\\admin\\signature.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\XM\\his-web\\src\\views\\admin\\signature.vue","mtime":1600936446195},{"path":"F:\\XM\\his-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1600936410370},{"path":"F:\\XM\\his-web\\node_modules\\babel-loader\\lib\\index.js","mtime":1600936408645},{"path":"F:\\XM\\his-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1600936410370},{"path":"F:\\XM\\his-web\\node_modules\\vue-loader\\lib\\index.js","mtime":1600936442292}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"F:/XM/his-web/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"F:/XM/his-web/node_modules/@babel/runtime/helpers/asyncToGenerator\"));\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.string.iterator\");\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _utils = require(\"@/utils\");\n\nvar _signature = require(\"@/api/signature\");\n\nvar _index = _interopRequireDefault(require(\"@/components/UploadExcel/index.vue\"));\n\nvar _Pagination = _interopRequireDefault(require(\"@/components/Pagination\"));\n\nvar _q = require(\"q\");\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// Secondary package based on el-pagination\nvar defaultDepart = {\n  id: '',\n  code: '',\n  name: '',\n  type: '',\n  state: ''\n};\nvar _default = {\n  components: {\n    Pagination: _Pagination.default,\n    UploadExcelComponent: _index.default\n  },\n  data: function data() {\n    return {\n      tableData: [],\n      tableHeader: [],\n      uploadVisible: false,\n      depart: Object.assign({}, defaultDepart),\n      //签章返回集\n      signatureList: [],\n      dialogVisible: false,\n      dialogType: 'new',\n      checkStrictly: false,\n      defaultProps: {\n        children: 'children',\n        label: 'title'\n      },\n      total: 0,\n      listLoading: true,\n      allSignature: [],\n      // 查询所需参数\n      listQuery: {\n        code: '',\n        name: '',\n        type: '',\n        state: '',\n        page: 1,\n        limit: 20\n      },\n      downloadLoading: false,\n      rules: {\n        code: [{\n          required: true,\n          message: '请输入签章编码',\n          trigger: 'blur'\n        }],\n        name: [{\n          required: true,\n          message: '请输入签章名称',\n          trigger: 'blur'\n        }],\n        type: [{\n          required: true,\n          message: '请选择签章类别',\n          trigger: 'blur'\n        }]\n      },\n      deplistref: []\n    };\n  },\n  computed: {},\n  created: function created() {\n    _q.Promise.all([this.selectType(), this.getSignatureList()]);\n  },\n  methods: {\n    beforeUpload: function beforeUpload(file) {\n      var isLt1M = file.size / 1024 / 1024 < 1;\n\n      if (isLt1M) {\n        return true;\n      }\n\n      this.$message({\n        message: 'Please do not upload files larger than 1m in size.',\n        type: 'warning'\n      });\n      return false;\n    },\n    handleSuccess: function handleSuccess(_ref) {\n      var _this = this;\n\n      var results = _ref.results,\n          header = _ref.header;\n      this.tableData = results;\n      this.tableHeader = header;\n      this.tableData.forEach(function (item) {\n        (0, _signature.createSignature)(item).then(function (res) {\n          _this.getSignatureList();\n\n          _this.$notify({\n            title: '成功',\n            message: '成功从Excel导入科室数据',\n            type: 'success',\n            duration: 2000\n          });\n\n          _this.uploadVisible = false;\n        });\n      });\n    },\n    selectType: function () {\n      var _selectType2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var response;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _signature.selectType)();\n\n              case 2:\n                response = _context.sent;\n                this.allSignature = response.data;\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function selectType() {\n        return _selectType2.apply(this, arguments);\n      }\n\n      return selectType;\n    }(),\n    // 查询列表\n    getSignatureList: function () {\n      var _getSignatureList2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var response;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.listLoading = true;\n                _context2.next = 3;\n                return (0, _signature.getSignatureList)(this.listQuery);\n\n              case 3:\n                response = _context2.sent;\n                this.signatureList = response.data.list;\n                this.total = response.data.total;\n                this.listLoading = false;\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getSignatureList() {\n        return _getSignatureList2.apply(this, arguments);\n      }\n\n      return getSignatureList;\n    }(),\n    // 添加签章\n    handleAdd: function handleAdd() {\n      var _this2 = this;\n\n      this.resetTemp();\n      this.dialogType = 'new';\n      this.dialogVisible = true;\n      this.checkStrictly = true;\n      this.$nextTick(function () {\n        _this2.$refs['depart'].clearValidate();\n      });\n    },\n    // 修改签章\n    handleEdit: function handleEdit(row) {\n      var _this3 = this;\n\n      this.resetTemp();\n      this.depart = Object.assign({}, row); // copy obj\n\n      this.dialogType = 'edit';\n      this.dialogVisible = true;\n      this.checkStrictly = true;\n      this.$nextTick(function () {\n        _this3.$refs['depart'].clearValidate();\n      });\n    },\n    // 添加签章或修改签章\n    confirmDep: function () {\n      var _confirmDep = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(formName) {\n        var _this4 = this;\n\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.$refs[formName].validate(function (valid) {\n                  if (valid) {\n                    var isEdit = _this4.dialogType === 'edit';\n                    _this4.listLoading = true;\n\n                    if (isEdit) {\n                      (0, _signature.updateSignature)(_this4.depart).then(function (res) {\n                        _this4.getSignatureList();\n\n                        _this4.$notify({\n                          title: '成功',\n                          message: '已修改该签章信息',\n                          type: 'success',\n                          duration: 2000\n                        });\n                      });\n                      _this4.dialogVisible = false;\n                    } else {\n                      // 添加签章\n                      _this4.depart.state = 2;\n                      (0, _signature.createSignature)(_this4.depart).then(function (res) {\n                        _this4.getSignatureList();\n\n                        _this4.$notify({\n                          title: '成功',\n                          message: '新增签章成功！',\n                          type: 'success',\n                          duration: 2000\n                        });\n\n                        _this4.dialogVisible = false;\n                      });\n                    }\n                  }\n                });\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function confirmDep(_x) {\n        return _confirmDep.apply(this, arguments);\n      }\n\n      return confirmDep;\n    }(),\n    //删除指定签章\n    handleDelete: function handleDelete(row) {\n      var _this5 = this;\n\n      this.$confirm('确认删除当前签章?', '警告', {\n        confirmButtonText: '确认',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(function () {\n        (0, _signature.deleteSignature)(row.id).then(function (res) {\n          _this5.$notify({\n            title: '成功',\n            message: '已删除该签章',\n            type: 'success',\n            duration: 2000\n          });\n\n          _this5.getSignatureList();\n        });\n      });\n    },\n    // 批量删除签章\n    handleSomeDelete: function handleSomeDelete() {\n      var _this6 = this;\n\n      this.$confirm('确认删除选中科室?', '警告', {\n        confirmButtonText: '确认',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(function () {\n        var delsom = '';\n\n        for (var i = 0; i < _this6.deplistref.length; i++) {\n          if (i !== _this6.deplistref.length - 1) delsom = delsom + _this6.deplistref[i].id + ',';else delsom = delsom + _this6.deplistref[i].id;\n        }\n\n        (0, _signature.deleteSignature)(delsom).then(function (res) {\n          _this6.$notify({\n            title: '成功',\n            message: '删除成功',\n            type: 'success',\n            duration: 2000\n          });\n\n          _this6.getSignatureList();\n        });\n      });\n    },\n    //启用 禁用\n    handleEnable: function handleEnable(row) {\n      this.depart = Object.assign({}, row);\n      this.depart.state = 1;\n      this.handleDisableOrEnable(this.depart);\n    },\n    handleDisable: function handleDisable(row) {\n      this.depart = Object.assign({}, row);\n      this.depart.state = 2;\n      this.handleDisableOrEnable(this.depart);\n    },\n    handleDisableOrEnable: function handleDisableOrEnable(data) {\n      var _this7 = this;\n\n      this.$confirm('确认启用或禁用当前签章?', '警告', {\n        confirmButtonText: '确认',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(function () {\n        (0, _signature.updateSignature)(data).then(function (res) {\n          _this7.getSignatureList();\n\n          _this7.$notify({\n            title: '成功',\n            message: '已启用或已禁用该签章',\n            type: 'success',\n            duration: 2000\n          });\n\n          _this7.getSignatureList();\n        });\n      });\n    },\n    handleFilter: function handleFilter() {\n      this.listQuery.page = 1;\n      this.getSignatureList();\n    },\n    resetTemp: function resetTemp() {\n      this.depart.id = '';\n      this.depart.name = '';\n      this.depart.code = '';\n      this.depart.type = '';\n      this.depart.state = '';\n    },\n    formatJson: function formatJson(filterVal, jsonData) {\n      return jsonData.map(function (v) {\n        return filterVal.map(function (j) {\n          if (j === 'timestamp') {\n            return parseTime(v[j]);\n          } else {\n            return v[j];\n          }\n        });\n      });\n    },\n    changedep: function changedep(val) {\n      this.deplistref = val;\n    }\n  }\n};\nexports.default = _default;",null]}