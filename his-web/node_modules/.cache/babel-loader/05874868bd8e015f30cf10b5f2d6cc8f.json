{"remainingRequest":"F:\\XM\\his-web\\node_modules\\thread-loader\\dist\\cjs.js!F:\\XM\\his-web\\node_modules\\babel-loader\\lib\\index.js!F:\\XM\\his-web\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\XM\\his-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\XM\\his-web\\src\\components\\UploadExcel\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\XM\\his-web\\src\\components\\UploadExcel\\index.vue","mtime":1600936446087},{"path":"F:\\XM\\his-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1600936410370},{"path":"F:\\XM\\his-web\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1600936436646},{"path":"F:\\XM\\his-web\\node_modules\\babel-loader\\lib\\index.js","mtime":1600936408645},{"path":"F:\\XM\\his-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1600936410370},{"path":"F:\\XM\\his-web\\node_modules\\vue-loader\\lib\\index.js","mtime":1600936442292}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport XLSX from 'xlsx';\nexport default {\n  props: {\n    beforeUpload: Function,\n    // eslint-disable-line\n    onSuccess: Function // eslint-disable-line\n\n  },\n  data: function data() {\n    return {\n      loading: false,\n      excelData: {\n        header: null,\n        results: null\n      }\n    };\n  },\n  methods: {\n    generateData: function generateData(_ref) {\n      var header = _ref.header,\n          results = _ref.results;\n      this.excelData.header = header;\n      this.excelData.results = results;\n      this.onSuccess && this.onSuccess(this.excelData);\n    },\n    handleDrop: function handleDrop(e) {\n      e.stopPropagation();\n      e.preventDefault();\n      if (this.loading) return;\n      var files = e.dataTransfer.files;\n\n      if (files.length !== 1) {\n        this.$message.error('Only support uploading one file!');\n        return;\n      }\n\n      var rawFile = files[0]; // only use files[0]\n\n      if (!this.isExcel(rawFile)) {\n        this.$message.error('Only supports upload .xlsx, .xls, .csv suffix files');\n        return false;\n      }\n\n      this.upload(rawFile);\n      e.stopPropagation();\n      e.preventDefault();\n    },\n    handleDragover: function handleDragover(e) {\n      e.stopPropagation();\n      e.preventDefault();\n      e.dataTransfer.dropEffect = 'copy';\n    },\n    handleUpload: function handleUpload() {\n      this.$refs['excel-upload-input'].click();\n    },\n    handleClick: function handleClick(e) {\n      var files = e.target.files;\n      var rawFile = files[0]; // only use files[0]\n\n      if (!rawFile) return;\n      this.upload(rawFile);\n    },\n    upload: function upload(rawFile) {\n      this.$refs['excel-upload-input'].value = null; // fix can't select the same excel\n\n      if (!this.beforeUpload) {\n        this.readerData(rawFile);\n        return;\n      }\n\n      var before = this.beforeUpload(rawFile);\n\n      if (before) {\n        this.readerData(rawFile);\n      }\n    },\n    readerData: function readerData(rawFile) {\n      var _this = this;\n\n      this.loading = true;\n      return new Promise(function (resolve, reject) {\n        var reader = new FileReader();\n\n        reader.onload = function (e) {\n          var data = e.target.result;\n          var workbook = XLSX.read(data, {\n            type: 'array'\n          });\n          var firstSheetName = workbook.SheetNames[0];\n          var worksheet = workbook.Sheets[firstSheetName];\n\n          var header = _this.getHeaderRow(worksheet);\n\n          var results = XLSX.utils.sheet_to_json(worksheet);\n\n          _this.generateData({\n            header: header,\n            results: results\n          });\n\n          _this.loading = false;\n          resolve();\n        };\n\n        reader.readAsArrayBuffer(rawFile);\n      });\n    },\n    getHeaderRow: function getHeaderRow(sheet) {\n      var headers = [];\n      var range = XLSX.utils.decode_range(sheet['!ref']);\n      var C;\n      var R = range.s.r;\n      /* start in the first row */\n\n      for (C = range.s.c; C <= range.e.c; ++C) {\n        /* walk every column in the range */\n        var cell = sheet[XLSX.utils.encode_cell({\n          c: C,\n          r: R\n        })];\n        /* find the cell in the first row */\n\n        var hdr = 'UNKNOWN ' + C; // <-- replace with your desired default\n\n        if (cell && cell.t) hdr = XLSX.utils.format_cell(cell);\n        headers.push(hdr);\n      }\n\n      return headers;\n    },\n    isExcel: function isExcel(file) {\n      return /\\.(xlsx|xls|csv)$/.test(file.name);\n    }\n  }\n};",null]}