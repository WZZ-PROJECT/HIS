{"remainingRequest":"F:\\XM\\his-web\\node_modules\\thread-loader\\dist\\cjs.js!F:\\XM\\his-web\\node_modules\\babel-loader\\lib\\index.js!F:\\XM\\his-web\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\XM\\his-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\XM\\his-web\\src\\views\\admin\\department.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\XM\\his-web\\src\\views\\admin\\department.vue","mtime":1601257506603},{"path":"F:\\XM\\his-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1600936410370},{"path":"F:\\XM\\his-web\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1600936436646},{"path":"F:\\XM\\his-web\\node_modules\\babel-loader\\lib\\index.js","mtime":1600936408645},{"path":"F:\\XM\\his-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1600936410370},{"path":"F:\\XM\\his-web\\node_modules\\vue-loader\\lib\\index.js","mtime":1600936442292}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"F:/XM/his-web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.iterator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport path from 'path';\nimport { deepClone } from '@/utils';\nimport { getDeplist as _getDeplist, getAllDep as _getAllDep, createDep, deleteDep, updateDep } from '@/api/department';\nimport UploadExcelComponent from '@/components/UploadExcel/index.vue';\nimport Pagination from '@/components/Pagination'; // Secondary package based on el-pagination\n\nimport { Promise } from 'q';\nvar defaultDepart = {\n  id: '',\n  code: '',\n  catId: '',\n  name: '',\n  type: ''\n};\nexport default {\n  components: {\n    Pagination: Pagination,\n    UploadExcelComponent: UploadExcelComponent\n  },\n  data: function data() {\n    return {\n      tableData: [],\n      tableHeader: [],\n      uploadVisible: false,\n      depart: Object.assign({}, defaultDepart),\n      depList: [],\n      dialogVisible: false,\n      dialogType: 'new',\n      checkStrictly: false,\n      defaultProps: {\n        children: 'children',\n        label: 'title'\n      },\n      deptype: [1, 2, 3, 4],\n      total: 0,\n      listLoading: true,\n      allCatId: [],\n      allDep: [],\n      allType: [],\n      listQuery: {\n        id: '',\n        code: '',\n        catId: '',\n        name: '',\n        type: '',\n        status: '',\n        page: 1,\n        limit: 20\n      },\n      downloadLoading: false,\n      rules: {\n        code: [{\n          required: true,\n          message: '请输入科室编码',\n          trigger: 'blur'\n        }],\n        name: [{\n          required: true,\n          message: '请输入科室名称',\n          trigger: 'blur'\n        }],\n        catId: [{\n          required: true,\n          message: '请选择科室分类',\n          trigger: 'blur'\n        }],\n        type: [{\n          required: true,\n          message: '请选择科室类别',\n          trigger: 'blur'\n        }]\n      },\n      deplistref: []\n    };\n  },\n  computed: {},\n  created: function created() {\n    Promise.all([this.getAllDep(), this.getDeplist()]);\n  },\n  methods: {\n    beforeUpload: function beforeUpload(file) {\n      var isLt1M = file.size / 1024 / 1024 < 1;\n\n      if (isLt1M) {\n        return true;\n      }\n\n      this.$message({\n        message: 'Please do not upload files larger than 1m in size.',\n        type: 'warning'\n      });\n      return false;\n    },\n    handleSuccess: function handleSuccess(_ref) {\n      var _this = this;\n\n      var results = _ref.results,\n          header = _ref.header;\n      this.tableData = results;\n      this.tableHeader = header;\n      this.tableData.forEach(function (item) {\n        createDep(item).then(function (res) {\n          _this.getDeplist();\n\n          _this.$notify({\n            title: '成功',\n            message: '成功从Excel导入科室数据',\n            type: 'success',\n            duration: 2000\n          });\n\n          _this.uploadVisible = false;\n        });\n      });\n    },\n    uploaddept: function uploaddept() {\n      this.uploadVisible = true;\n    },\n    getAllDep: function () {\n      var _getAllDep2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var response;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _getAllDep();\n\n              case 2:\n                response = _context.sent;\n                this.allDep = response.data;\n                this.allDep.forEach(function (item) {\n                  if (_this2.allCatId.indexOf(item.catId) === -1) {\n                    _this2.allCatId.push(item.catId);\n                  }\n\n                  if (_this2.allType.indexOf(item.type) === -1) {\n                    _this2.allType.push(item.type);\n                  }\n                });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getAllDep() {\n        return _getAllDep2.apply(this, arguments);\n      }\n\n      return getAllDep;\n    }(),\n    getDeplist: function () {\n      var _getDeplist2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var response;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.listLoading = true;\n                _context2.next = 3;\n                return _getDeplist(this.listQuery);\n\n              case 3:\n                response = _context2.sent;\n                this.depList = response.data.list;\n                this.total = response.data.total;\n                this.listLoading = false;\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getDeplist() {\n        return _getDeplist2.apply(this, arguments);\n      }\n\n      return getDeplist;\n    }(),\n    handleFilter: function handleFilter() {\n      this.listQuery.page = 1;\n      this.getDeplist();\n    },\n    handleAdd: function handleAdd() {\n      var _this3 = this;\n\n      this.resetTemp();\n      this.dialogType = 'new';\n      this.dialogVisible = true;\n      this.checkStrictly = true;\n      this.$nextTick(function () {\n        _this3.$refs['depart'].clearValidate();\n      });\n    },\n    handleEdit: function handleEdit(row) {\n      var _this4 = this;\n\n      this.resetTemp();\n      this.depart = Object.assign({}, row); // copy obj\n\n      this.dialogType = 'edit';\n      this.dialogVisible = true;\n      this.checkStrictly = true;\n      this.$nextTick(function () {\n        _this4.$refs['depart'].clearValidate();\n      });\n    },\n    resetTemp: function resetTemp() {\n      this.depart.id = '';\n      this.depart.name = '';\n      this.depart.catId = '';\n      this.depart.code = '';\n      this.depart.type = '';\n    },\n    formatJson: function formatJson(filterVal, jsonData) {\n      return jsonData.map(function (v) {\n        return filterVal.map(function (j) {\n          if (j === 'timestamp') {\n            return parseTime(v[j]);\n          } else {\n            return v[j];\n          }\n        });\n      });\n    },\n    changedep: function changedep(val) {\n      this.deplistref = val;\n    },\n    handleSomeDelete: function handleSomeDelete() {\n      var _this5 = this;\n\n      if (this.deplistref.length === 0) {\n        this.$notify({\n          title: '提示',\n          message: \"请选择科室！\",\n          type: 'warning',\n          duration: 2000\n        });\n        return;\n      }\n\n      this.$confirm('确认删除选中科室?', '警告', {\n        confirmButtonText: '确认',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(function () {\n        var delsom = '';\n\n        for (var i = 0; i < _this5.deplistref.length; i++) {\n          if (i !== _this5.deplistref.length - 1) delsom = delsom + _this5.deplistref[i].id + ',';else delsom = delsom + _this5.deplistref[i].id;\n        }\n\n        deleteDep(delsom).then(function (res) {\n          _this5.$notify({\n            title: '成功',\n            message: '删除成功',\n            type: 'success',\n            duration: 2000\n          });\n\n          _this5.getDeplist();\n        });\n      });\n    },\n    handleDelete: function handleDelete(row) {\n      var _this6 = this;\n\n      this.$confirm('确认删除当前科室?', '警告', {\n        confirmButtonText: '确认',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(function () {\n        deleteDep(row.id).then(function (res) {\n          _this6.$notify({\n            title: '成功',\n            message: '已删除该科室',\n            type: 'success',\n            duration: 2000\n          });\n\n          _this6.getDeplist();\n        });\n      });\n    },\n    handleDownload: function handleDownload() {\n      var _this7 = this;\n\n      this.getAllDep();\n      this.downloadLoading = true;\n      import('@/vendor/Export2Excel').then(function (excel) {\n        var tHeader = ['科室编码', '科室名称', '科室分类', '科室类型'];\n        var filterVal = ['code', 'name', 'catId', 'type'];\n\n        var data = _this7.formatJson(filterVal, _this7.allDep);\n\n        excel.export_json_to_excel({\n          header: tHeader,\n          data: data,\n          filename: '科室目录'\n        });\n        _this7.downloadLoading = false;\n      });\n    },\n    confirmDep: function () {\n      var _confirmDep = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(formName) {\n        var _this8 = this;\n\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.$refs[formName].validate(function (valid) {\n                  if (valid) {\n                    console.log(_this8.depart);\n                    var isEdit = _this8.dialogType === 'edit';\n                    _this8.listLoading = true;\n\n                    if (isEdit) {\n                      console.log(_this8.depart.id);\n                      updateDep(_this8.depart).then(function (res) {\n                        _this8.getDeplist();\n\n                        _this8.$notify({\n                          title: '成功',\n                          message: '已修改该科室',\n                          type: 'success',\n                          duration: 2000\n                        });\n                      });\n                      _this8.dialogVisible = false;\n                    } else {\n                      createDep(_this8.depart).then(function (res) {\n                        _this8.getDeplist();\n\n                        _this8.$notify({\n                          title: '成功',\n                          message: '新增科室成功！',\n                          type: 'success',\n                          duration: 2000\n                        });\n\n                        _this8.dialogVisible = false;\n                      });\n                    }\n                  }\n                });\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function confirmDep(_x) {\n        return _confirmDep.apply(this, arguments);\n      }\n\n      return confirmDep;\n    }()\n  }\n};",null]}