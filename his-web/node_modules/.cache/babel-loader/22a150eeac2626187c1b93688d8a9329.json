{"remainingRequest":"D:\\IdeaProjects\\HIS\\HIS-web\\node_modules\\babel-loader\\lib\\index.js!D:\\IdeaProjects\\HIS\\HIS-web\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\IdeaProjects\\HIS\\HIS-web\\mock\\department.js","dependencies":[{"path":"D:\\IdeaProjects\\HIS\\HIS-web\\mock\\department.js","mtime":1596785876295},{"path":"D:\\IdeaProjects\\HIS\\HIS-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IdeaProjects\\HIS\\HIS-web\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\IdeaProjects\\HIS\\HIS-web\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/IdeaProjects/HIS/HIS-web/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.function.name\");\n\nvar _mockjs = _interopRequireDefault(require(\"mockjs\"));\n\nvar List = [];\nvar count = 100;\n\nfor (var i = 0; i < count; i++) {\n  List.push(_mockjs.default.mock({\n    id: '@increment',\n    code: '@increment',\n    catId: '@integer(11,29)',\n    'name|1': ['心血管内科', '神经内科', '消化内科', '药剂科'],\n    type: '@integer(1,4)'\n  }));\n}\n\nvar _default = [{\n  url: '/deplist',\n  type: 'get',\n  response: function response(_) {\n    return {\n      code: 20000,\n      data: List\n    };\n  }\n}, {\n  url: '/dep/list',\n  type: 'get',\n  response: function response(config) {\n    var _config$query = config.query,\n        code = _config$query.code,\n        catId = _config$query.catId,\n        name = _config$query.name,\n        type = _config$query.type,\n        _config$query$page = _config$query.page,\n        page = _config$query$page === void 0 ? 1 : _config$query$page,\n        _config$query$limit = _config$query.limit,\n        limit = _config$query$limit === void 0 ? 20 : _config$query$limit;\n    var mockList = List.filter(function (item) {\n      if (code && item.code !== +code) return false;\n      if (catId && item.catId !== +catId) return false;\n      if (type && item.type !== +type) return false;\n      if (name && item.name !== name) return false;\n      return true;\n    });\n    var pageList = mockList.filter(function (item, index) {\n      return index < limit * page && index >= limit * (page - 1);\n    });\n    return {\n      code: 20000,\n      data: {\n        total: mockList.length,\n        items: pageList\n      }\n    };\n  }\n}];\nexports.default = _default;",null]}