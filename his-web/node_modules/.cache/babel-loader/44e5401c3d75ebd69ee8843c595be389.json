{"remainingRequest":"F:\\XM\\his-web\\node_modules\\thread-loader\\dist\\cjs.js!F:\\XM\\his-web\\node_modules\\babel-loader\\lib\\index.js!F:\\XM\\his-web\\src\\store\\modules\\permission.js","dependencies":[{"path":"F:\\XM\\his-web\\src\\store\\modules\\permission.js","mtime":1600936446177},{"path":"F:\\XM\\his-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1600936410370},{"path":"F:\\XM\\his-web\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1600936436646},{"path":"F:\\XM\\his-web\\node_modules\\babel-loader\\lib\\index.js","mtime":1600936408645}],"contextDependencies":[],"result":["import _objectSpread from \"F:/XM/his-web/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport { asyncRoutes, constantRoutes } from '@/router';\n/**\r\n * Use meta.role to determine if the current user has permission\r\n * @param roles\r\n * @param route\r\n */\n\nfunction hasPermission(roles, route) {\n  if (route.meta && route.meta.roles) {\n    return roles.some(function (role) {\n      return route.meta.roles.includes(role);\n    });\n  } else {\n    return true;\n  }\n}\n/**\r\n * Filter asynchronous routing tables by recursion\r\n * @param routes asyncRoutes\r\n * @param roles\r\n */\n\n\nexport function filterAsyncRoutes(routes, roles) {\n  var res = [];\n  routes.forEach(function (route) {\n    var tmp = _objectSpread({}, route);\n\n    if (hasPermission(roles, tmp)) {\n      if (tmp.children) {\n        tmp.children = filterAsyncRoutes(tmp.children, roles);\n      }\n\n      res.push(tmp);\n    }\n  });\n  return res;\n}\nvar state = {\n  routes: [],\n  addRoutes: []\n};\nvar mutations = {\n  SET_ROUTES: function SET_ROUTES(state, routes) {\n    state.addRoutes = routes;\n    state.routes = constantRoutes.concat(routes);\n  }\n};\nvar actions = {\n  generateRoutes: function generateRoutes(_ref, roles) {\n    var commit = _ref.commit;\n    return new Promise(function (resolve) {\n      var accessedRoutes;\n\n      if (roles.includes('admin')) {\n        accessedRoutes = asyncRoutes || [];\n      } else {\n        accessedRoutes = filterAsyncRoutes(asyncRoutes, roles);\n      }\n\n      commit('SET_ROUTES', accessedRoutes);\n      resolve(accessedRoutes);\n    });\n  }\n};\nexport default {\n  namespaced: true,\n  state: state,\n  mutations: mutations,\n  actions: actions\n};",null]}