{"remainingRequest":"F:\\XM\\his-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\XM\\his-web\\src\\views\\admin\\drug.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\XM\\his-web\\src\\views\\admin\\drug.vue","mtime":1601368041786},{"path":"F:\\XM\\his-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1600936410370},{"path":"F:\\XM\\his-web\\node_modules\\babel-loader\\lib\\index.js","mtime":1600936408645},{"path":"F:\\XM\\his-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1600936410370},{"path":"F:\\XM\\his-web\\node_modules\\vue-loader\\lib\\index.js","mtime":1600936442292}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport path from 'path'\nimport { deepClone } from '@/utils'\nimport {getdrugList,getAlldrug,updatedrug,deletedrug,createdrug,getAlldosage} from '@/api/drug'\nimport Pagination from '@/components/Pagination' // Secondary package based on el-pagination\nimport { Promise } from 'q';\n\nconst defaultDrug = {\n  id:'',\n  code: '',\n  name: '',\n  format: '',\n  price: '',\n  unit: '',\n  manufacturer:'',\n  dosage:{\n    id: '',\n  },\n  dosageId:'',\n  typeID:'',\n  mnemonicCode:'',\n  stock:'',\n  genericName:''\n}\n\nexport default {\n  components: {Pagination},\n  data() {\n    return {\n      drug: Object.assign({},defaultDrug),\n      drugList:[],\n      allDosage:[],\n      dialogVisible: false,\n      dialogType: 'new',\n      checkStrictly: false,\n      defaultProps: {\n        children: 'children',\n        label: 'title'\n      },\n      deptype:[1,2,3,4],\n      total: 0,\n      listLoading: true,\n      allCatId:[],\n      allDep:[],\n      allType:[],\n      listQuery: {\n        id:'',\n        code: '',\n        name: '',\n        format: '',\n        price: '',\n        unit: '',\n        manufacturer:'',\n        dosage:{},\n        typeId:'',\n        mnemonicCode:'',\n        stock:'',\n        genericName:'',\n        pageNum: 1,\n        pageSize: 20\n      },\n      downloadLoading: false,\n      rules:{\n        code:[\n          {required: true, message: '请输入药品编码',trigger: 'blur'},\n          { min: 4, max: 4, message: '长度为4个字符', trigger: 'blur' },\n          { pattern: /^[a-zA-Z][0-9]*$/, message: '一个字母三个数字', trigger: 'blur'  },\n        ],\n        name:[\n          {required: true, message: '请输入药品名称',trigger: 'blur'},\n          { min: 2, max: 10, message: '长度在 2 到 10 个字符', trigger: 'blur' },\n        ],\n        unit:[\n          {required: true, message: '请输入包装单位',trigger: 'blur'},\n\n        ],\n        dosage:[\n          {required: true, message: '请输入药品剂型',trigger: 'blur'},\n        ],\n        typeId:[\n          {required: true, message: '请输入药品类型',trigger: 'blur'},\n\n        ],\n        manufacturer:[\n          {required: true, message: '请输入生产厂家',trigger: 'blur'},\n          { min: 2, max: 8, message: '长度在 2 到 8 个字符', trigger: 'blur' },\n        ],\n        format:[\n          {required: true, message: '药品规格',trigger: 'blur'},\n          { min: 2, max: 8, message: '长度在 2 到 8 个字符', trigger: 'blur' },\n\n        ],\n        price:[\n          {required: true, message: '药品单价',trigger: 'blur'},\n          { pattern:  /^\\d+$|^\\d+[.]?\\d+$/, message: '只能输入数字', trigger: 'blur'  },\n        ],\n        mnemonicCode:[\n          {required: true, message: '助记码',trigger: 'blur'},\n        ],\n        genericName :[\n          {required: true, message: '通用名',trigger: 'blur'},\n        ],\n        stock :[\n          {required: true, message: '库存',trigger: 'blur'},\n          { pattern:  /^\\d+$|^\\d+[.]?\\d+$/, message: '只能输入数字', trigger: 'blur'  },\n        ],\n\n\n      },\n      deplistref:[]\n    }\n  },\n  computed: {\n\n  },\n  created() {\n    // Mock: get all routes and roles list from server\n    Promise.all([\n    this.getDosage(),\n    this.getdrugList()\n    ])\n  },\n  methods: {\n    async getDosage(){\n      const response = await getAlldosage()\n      this.allDosage = response.data\n    },\n    async getdrugList() {\n      this.listLoading = true\n      const response = await getdrugList(this.listQuery)\n      this.drugList = response.data.list\n      this.total = response.data.total\n      this.listLoading = false\n    },\n    handleFilter() {\n      this.listQuery.page = 1\n      this.listQuery.typeId = this.listQuery.typeID\n      this.getdrugList()\n    },\n    handleAdd() {\n      this.resetTemp()\n      this.dialogType = 'new'\n      this.dialogVisible = true\n      this.checkStrictly = true\n      this.$nextTick(() => {\n        this.$refs['depart'].clearValidate()\n      })\n    },\n    handleEdit(row) {\n      this.resetTemp()\n      this.drug = deepClone(row)\n      this.drug.typeID = deepClone(row.typeId)\n      console.log(this.drug)\n      this.dialogType = 'edit'\n      this.dialogVisible = true\n      this.checkStrictly = true\n      this.$nextTick(() => {\n        this.$refs['depart'].clearValidate()\n      })\n    },\n    resetTemp() {\n      this.drug = Object.assign({},defaultDrug)\n    },\n    formatJson(filterVal, jsonData) {\n      return jsonData.map(v => filterVal.map(j => {\n        if (j === 'timestamp') {\n          return parseTime(v[j])\n        } else {\n          return v[j]\n        }\n      }))\n    },\n    changedep(val){\n      this.deplistref=val;\n    },\n    handleSomeDelete(){\n      if (this.deplistref.length===0){\n        this.$notify({\n          title: '提示',\n          message: \"请选择要删除的药品！\",\n          type: 'warning',\n          duration: 2000\n        })\n        return;\n      }\n      this.$confirm('确认删除选中药品?', '警告', {\n        confirmButtonText: '确认',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(()=>{\n      let delsom =''\n      for(let i=0;i<this.deplistref.length;i++){\n        if(i!==this.deplistref.length-1)\n          delsom=delsom+(this.deplistref[i].id)+','\n        else\n          delsom=delsom+(this.deplistref[i].id)\n      }if(delsom != null && delsom != ''){\n          deletedrug(delsom).then(res=>{\n              this.$notify({\n                title: '成功',\n                message: res.message,\n                type: 'success',\n                duration: 2000\n              })\n              this.getdrugList()\n            }\n          )\n        }\n\n      })\n    }\n    ,\n    handleDelete(row) {\n      this.$confirm('确认删除当前药品?', '警告', {\n        confirmButtonText: '确认',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(()=>{\n      deletedrug(row.id).then(res=>{\n        this.$notify({\n        title: '成功',\n        message: '已删除该药品',\n        type: 'success',\n        duration: 2000\n      })\n      this.getdrugList()\n      })\n      })\n    },\n    handleDownload() {\n      getAlldrug().then(res=>{\n      let alldrug = res.data\n      this.downloadLoading = true\n      import('@/vendor/Export2Excel').then(excel => {\n        const tHeader = ['索引', '药品编码', '药品名称', '药品规格','药品单价','包装单位','生产厂家','药品类型','拼音助记码','通用名','库存']\n        const filterVal = ['id', 'code', 'name', 'format','price','unit','manufacturer','typeId','mnemonicCode','genericName','stock']\n        const data = this.formatJson(filterVal, alldrug)\n        excel.export_json_to_excel({\n          header: tHeader,\n          data,\n          filename: '药品清单'\n        })\n        this.downloadLoading = false\n      })\n      })\n    },\n    async confirmDep(formName){\n      this.$refs[formName].validate((valid)=>{\n        this.drug.dosageID = this.drug.dosage.id\n        this.drug.dosageId = this.drug.dosage.id\n        this.drug.typeID = this.drug.typeId\n        if(valid){\n          const isEdit = this.dialogType === 'edit'\n          this.listLoading=true\n          if(isEdit){\n            updatedrug(this.drug).then(res=>{\n                this.getdrugList()\n                this.$notify({\n                title: '成功',\n                message: '已修改该药品',\n                type: 'success',\n                duration: 2000\n              })\n            })\n            this.dialogVisible=false\n          }else{\n            createdrug(this.drug).then(res=>{\n              this.getdrugList()\n              this.$notify({\n              title: '成功',\n              message: res.message,\n              type: 'success',\n              duration: 2000\n            })\n            this.dialogVisible=false\n            })\n          }\n        }\n      })\n    },\n  }\n}\n",null]}