{"remainingRequest":"F:\\XM\\his-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\XM\\his-web\\src\\views\\outpatient\\workstation\\prescription.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\XM\\his-web\\src\\views\\outpatient\\workstation\\prescription.vue","mtime":1602056307737},{"path":"F:\\XM\\his-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1600936410370},{"path":"F:\\XM\\his-web\\node_modules\\babel-loader\\lib\\index.js","mtime":1600936408645},{"path":"F:\\XM\\his-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1600936410370},{"path":"F:\\XM\\his-web\\node_modules\\vue-loader\\lib\\index.js","mtime":1600936442292}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {getdrugList,selectById} from '@/api/drug'\nimport Pagination from '@/components/Pagination'\nimport {apply,listByReg,invalid} from '@/api/outpatient/prescription'\nimport {deepClone} from '@/utils'\nimport {selectByType} from '@/api/outpatient/frequentuse'\nimport {getDrugPrescription,saveDrugPrescription} from '@/api/outpatient/save'\nimport {listModel} from '@/api/drugmodel'\nconst defaultpre={\n  name:'',\n  druglist:[],\n  amount:0,\n  status:-1,\n}\nexport default {\n  props:['patient'],\n  components: {Pagination},\n  name:'Prescription',\n  data(){\n    return{\n      modelvisivle:false,\n      model:{},\n      models:[],\n      freqlist:[],\n      refs:[],\n      prescriptionList:[],\n      oneprescription:{\n        name:'',\n        druglist:[],\n        amount:0,\n        status:-1,\n      },\n      edit:false,\n      test:'',\n      num:0,\n      dialogTableVisible:false,\n      activeName:'first',\n      isclose:true,\n      record:{\n        main:'test'\n      },\n      page:{\n        pageNum:1,\n        pageSize:10,\n      },\n      searchdrug:'',\n      drugList:[],\n      total:0,\n      mainwidth:\"65%\",\n      activeNames: ['1'],\n    };\n  },\n  watch:{\n    'patient' : function(newVal, oldVal){\n      this.patient = newVal\n      this.listByReg()\n\n    },\n  },\n  created(){\n    this.listModel()\n  },\n  methods:{\n    addmodel(val){\n      val.amount = Math.floor((val.amount+0.5)*100)/100\n      val.status = -1\n      this.prescriptionList.push(val)\n    },\n    selectmodel(val){\n      this.model = deepClone(val)\n      this.model.amount = Math.floor((this.model.amount+0.5)*100)/100\n      this.modelvisivle = true\n    },\n    listModel(){\n      let data = {}\n      data.scope = 0\n      data.ownId = this.$store.getters.id\n      data.type = 1\n      data.pageSize = 1000\n      data.pageNum = 1\n      data.isAdmin = 0\n      listModel(data).then(res=>{\n        this.models = res.data.list\n        this.models.forEach(model=>{\n          model.druglist = []\n          model.amount = 0\n          model.dmsMedicineModelItemList.forEach(item=>{\n            let data = {}\n            selectById(item.id).then(res=>{\n              data = res.data\n              data.days = item.days\n              data.frequency = item.frequency\n              data.medicalAdvice = item.medicalAdvice\n              data.medicineUsage = item.medicineUsage\n              data.usageMeans = item.usageMeans\n              data.num = item.num\n              data.usageNum = item.usageNum\n              data.usageNumUnit = item.usageNumUnit\n              model.amount += (data.price*item.num)\n              model.druglist.push(deepClone(data))\n            })\n          })\n          model.amount = Math.floor((model.amount+0.5)*100)/100\n        })\n      })\n    },\n    saveDrugPrescription(){\n      saveDrugPrescription(this.refs,this.patient.registrationId,4).then(res=>{\n        this.$notify({\n          title: '成功',\n          message: '已暂存选中的成药处方',\n          type: 'success',\n          duration: 2000\n        })\n      })\n    },\n    getDrugPrescription(){\n      let data = {}\n      data.registrationId = this.patient.registrationId\n      data.type = 4\n\n      getDrugPrescription(data).then(res=>{\n        res.data.forEach(item=>{\n          this.prescriptionList.push(item)\n\n        })\n      })\n      this.$notify({\n        title: '成功',\n        message: '已取出暂存的成药处方',\n        type: 'success',\n        duration: 2000\n      })\n    },\n\n    /* getNonDrug(){\n       let data = {}\n       data.registrationId = this.patient.registrationId\n       data.type = 0\n       getNonDrug(data).then(res=>{\n         res.data.dmsNonDrugItemRecordParamList.forEach(item=>{\n           this.selectCheckred(item)\n         })\n         this.$notify({\n           title: '成功',\n           message: '已取出暂存的检查项',\n           type: 'success',\n           duration: 2000\n         })\n       })\n     },*/\n    addfreitem(val){\n      this.selectCheck(val)\n    },\n    getfreqList(){\n      let data = {}\n      data.staffId = this.$store.getters.id\n      data.selectType = 6\n      selectByType(data).then(res=>{\n        this.freqlist = res.data.drugList.filter(item=>{\n          if(item.typeId === 101)\n            return true\n        })\n      })\n    },\n    refresh(){\n      this.$confirm('未开立的处方都将清除,确认刷新?', '刷新', {\n        confirmButtonText: '确认',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(()=>{\n        this.listByReg()\n      })\n    },\n    deletepre(){\n      let data = this.refs[0].name\n      this.prescriptionList=this.prescriptionList.filter(item=>{\n        if(item.name===data)\n          return false\n        return true\n      })\n    },\n    invalid(){\n      let data = this.refs[0].id\n      invalid(data).then(res=>{\n        this.$notify({\n          title: '成功',\n          message: res.message,\n          type: 'success',\n          duration: 2000\n        })\n        this.listByReg()\n      })\n    },\n    async listByReg(){\n      listByReg(this.patient.registrationId).then(res=>{\n        this.prescriptionList=res.data\n      })\n    },\n    handleSelectionChange(val){\n      this.refs = val\n    },\n    async apply(){\n      let data = this.refs[0]\n      data.createStaffId = this.$store.getters.id\n      data.registrationId = this.patient.registrationId\n      data.dmsMedicineItemRecordList = data.druglist\n      data.dmsMedicineItemRecordList.forEach(item=>{\n        item.drugId = item.id\n      })\n      apply(data).then(res=>{\n        this.$notify({\n          title: '成功',\n          message: res.message,\n          type: 'success',\n          duration: 2000\n        })\n        this.listByReg()\n      })\n    },\n    createpre(){\n      this.edit = false\n      this.prescriptionList.push(this.oneprescription)\n      this.dialogTableVisible = false\n    },\n    changepre(){\n      this.dialogTableVisible =false\n    },\n    changenum(val){\n      this.oneprescription.amount=0\n      this.oneprescription.druglist.forEach(item=>{\n        this.oneprescription.amount+=item.price*item.num\n      })\n      this.oneprescription.amount = Math.floor((this.oneprescription.amount+0.5)*100)/100\n    },\n    deldrug(row){\n      this.oneprescription.druglist = this.oneprescription.druglist.filter(item=>{\n        if(item.id===row.id)\n          return false\n        return true\n      })\n    },\n    choosedrug(val){\n      let flag = 1\n      this.oneprescription.druglist.forEach(item=>{\n        if(item.id===val.id){\n          item.num+=1\n          flag=0\n        }\n      })\n      if(flag){\n        this.oneprescription.amount +=val.price\n        this.oneprescription.amount = Math.floor((this.oneprescription.amount+0.5)*100)/100\n        this.oneprescription.druglist.push(val)\n        this.oneprescription.druglist.forEach(item=>{\n          if(item.num===undefined)\n            item.num=1\n        })\n      }\n    },\n    async getdrugList() {\n      let data = {}\n      data.pageSize = this.page.pageSize\n      data.pageNum = this.page.pageNum\n      data.status = 1\n      data.typeId = 101\n      data.name = this.searchdrug\n      const response = await getdrugList(data)\n      this.drugList = response.data.list\n      this.total = response.data.total\n    },\n    addpre(){\n      this.getfreqList()\n      this.edit = false\n      this.oneprescription = deepClone(defaultpre)\n      this.getdrugList()\n      this.dialogTableVisible = true\n    },\n    showDetail(row){\n      this.edit = true\n      this.oneprescription = row\n      this.dialogTableVisible=true\n    },\n    controlfast(){\n      this.isclose=!this.isclose\n      if(this.mainwidth===\"65%\")\n        this.mainwidth=\"80%\"\n      else\n        this.mainwidth=\"65%\"\n    }\n  }\n}\n",null]}