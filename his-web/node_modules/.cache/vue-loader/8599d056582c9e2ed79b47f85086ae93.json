{"remainingRequest":"F:\\XM\\his-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\XM\\his-web\\src\\views\\admin\\signature.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\XM\\his-web\\src\\views\\admin\\signature.vue","mtime":1600936446195},{"path":"F:\\XM\\his-web\\node_modules\\babel-loader\\lib\\index.js","mtime":1600936408645},{"path":"F:\\XM\\his-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1600936410370},{"path":"F:\\XM\\his-web\\node_modules\\vue-loader\\lib\\index.js","mtime":1600936442292}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport path from 'path'\r\nimport { deepClone } from '@/utils'\r\nimport { getSignatureList,selectType,createSignature,deleteSignature,updateSignature } from '@/api/signature'\r\nimport UploadExcelComponent from '@/components/UploadExcel/index.vue'\r\nimport Pagination from '@/components/Pagination' // Secondary package based on el-pagination\r\nimport { Promise } from 'q';\r\n\r\nconst defaultDepart = {\r\n  id:'',\r\n  code: '',\r\n  name: '',\r\n  type: '',\r\n  state:''\r\n}\r\n\r\nexport default {\r\n  components: {Pagination,UploadExcelComponent},\r\n\r\n  data() {\r\n    return {\r\n      tableData: [],\r\n      tableHeader: [],\r\n      uploadVisible:false,\r\n      depart: Object.assign({},defaultDepart),\r\n      //签章返回集\r\n      signatureList: [],\r\n      dialogVisible: false,\r\n      dialogType: 'new',\r\n      checkStrictly: false,\r\n      defaultProps: {\r\n        children: 'children',\r\n        label: 'title'\r\n      },\r\n      total: 0,\r\n      listLoading: true,\r\n      allSignature:[],\r\n      // 查询所需参数\r\n      listQuery: {\r\n        code: '',\r\n        name: '',\r\n        type: '',\r\n        state:'',\r\n        page: 1,\r\n        limit: 20\r\n      },\r\n      downloadLoading: false,\r\n      rules:{\r\n        code:[\r\n          {required: true, message: '请输入签章编码',trigger: 'blur'}\r\n        ],\r\n        name:[\r\n          {required: true, message: '请输入签章名称',trigger: 'blur'}\r\n        ],\r\n        type:[\r\n          {required: true, message: '请选择签章类别',trigger: 'blur'}\r\n        ]\r\n      },\r\n      deplistref:[]\r\n    }\r\n  },\r\n  computed: {\r\n\r\n  },\r\n  created() {\r\n    Promise.all([\r\n    this.selectType(),\r\n    this.getSignatureList()\r\n    ])\r\n  },\r\n  methods: {\r\n    beforeUpload(file) {\r\n      const isLt1M = file.size / 1024 / 1024 < 1\r\n      if (isLt1M) {\r\n        return true\r\n      }\r\n      this.$message({\r\n        message: 'Please do not upload files larger than 1m in size.',\r\n        type: 'warning'\r\n      })\r\n      return false\r\n    },\r\n    handleSuccess({ results, header }) {\r\n      this.tableData = results\r\n      this.tableHeader = header\r\n      this.tableData.forEach(item=>{\r\n        createSignature(item).then(res=>{\r\n          this.getSignatureList()\r\n          this.$notify({\r\n          title: '成功',\r\n          message: '成功从Excel导入科室数据',\r\n          type: 'success',\r\n          duration: 2000\r\n        })\r\n          this.uploadVisible = false\r\n        })\r\n      })\r\n\r\n    },\r\n    async selectType(){\r\n      const response = await selectType()\r\n      this.allSignature = response.data\r\n    },\r\n\r\n    // 查询列表\r\n    async getSignatureList() {\r\n      this.listLoading = true\r\n      const response = await getSignatureList(this.listQuery)\r\n      this.signatureList = response.data.list\r\n      this.total = response.data.total\r\n      this.listLoading = false\r\n    },\r\n    // 添加签章\r\n    handleAdd() {\r\n      this.resetTemp()\r\n      this.dialogType = 'new'\r\n      this.dialogVisible = true\r\n      this.checkStrictly = true\r\n      this.$nextTick(() => {\r\n        this.$refs['depart'].clearValidate()\r\n      })\r\n    },\r\n    // 修改签章\r\n    handleEdit(row) {\r\n      this.resetTemp()\r\n      this.depart = Object.assign({}, row) // copy obj\r\n      this.dialogType = 'edit'\r\n      this.dialogVisible = true\r\n      this.checkStrictly = true\r\n      this.$nextTick(() => {\r\n        this.$refs['depart'].clearValidate()\r\n      })\r\n    },\r\n    // 添加签章或修改签章\r\n    async confirmDep(formName){\r\n      this.$refs[formName].validate((valid)=>{\r\n        if(valid){\r\n          const isEdit = this.dialogType === 'edit'\r\n          this.listLoading=true\r\n          if(isEdit){\r\n            updateSignature(this.depart).then(res=>{\r\n              this.getSignatureList()\r\n              this.$notify({\r\n                title: '成功',\r\n                message: '已修改该签章信息',\r\n                type: 'success',\r\n                duration: 2000\r\n              })\r\n            })\r\n            this.dialogVisible=false\r\n          }else{\r\n            // 添加签章\r\n            this.depart.state = 2;\r\n            createSignature(this.depart).then(res=>{\r\n              this.getSignatureList()\r\n              this.$notify({\r\n                title: '成功',\r\n                message: '新增签章成功！',\r\n                type: 'success',\r\n                duration: 2000\r\n              })\r\n              this.dialogVisible=false\r\n            })\r\n          }\r\n        }\r\n      })\r\n    },\r\n    //删除指定签章\r\n    handleDelete(row) {\r\n      this.$confirm('确认删除当前签章?', '警告', {\r\n        confirmButtonText: '确认',\r\n        cancelButtonText: '取消',\r\n        type: 'warning'\r\n      }).then(()=>{\r\n        deleteSignature(row.id).then(res=>{\r\n          this.$notify({\r\n            title: '成功',\r\n            message: '已删除该签章',\r\n            type: 'success',\r\n            duration: 2000\r\n          })\r\n          this.getSignatureList()\r\n        })\r\n      })\r\n    },\r\n    // 批量删除签章\r\n    handleSomeDelete(){\r\n      this.$confirm('确认删除选中科室?', '警告', {\r\n        confirmButtonText: '确认',\r\n        cancelButtonText: '取消',\r\n        type: 'warning'\r\n      }).then(()=>{\r\n        let delsom =''\r\n        for(let i=0;i<this.deplistref.length;i++){\r\n          if(i!==this.deplistref.length-1)\r\n            delsom=delsom+(this.deplistref[i].id)+','\r\n          else\r\n            delsom=delsom+(this.deplistref[i].id)\r\n        }\r\n        deleteSignature(delsom).then(res=>{\r\n            this.$notify({\r\n              title: '成功',\r\n              message: '删除成功',\r\n              type: 'success',\r\n              duration: 2000\r\n            })\r\n            this.getSignatureList()\r\n          }\r\n        )\r\n      })\r\n    },\r\n\r\n    //启用 禁用\r\n    handleEnable(row){\r\n      this.depart = Object.assign({}, row);\r\n      this.depart.state = 1;\r\n      this.handleDisableOrEnable(this.depart)\r\n    },\r\n    handleDisable(row){\r\n      this.depart = Object.assign({}, row);\r\n      this.depart.state = 2;\r\n      this.handleDisableOrEnable(this.depart)\r\n    },\r\n    handleDisableOrEnable(data){\r\n      this.$confirm('确认启用或禁用当前签章?', '警告', {\r\n        confirmButtonText: '确认',\r\n        cancelButtonText: '取消',\r\n        type: 'warning'\r\n      }).then(()=>{\r\n        updateSignature(data).then(res=>{\r\n          this.getSignatureList()\r\n          this.$notify({\r\n            title: '成功',\r\n            message: '已启用或已禁用该签章',\r\n            type: 'success',\r\n            duration: 2000\r\n          })\r\n          this.getSignatureList()\r\n        })\r\n      })\r\n    },\r\n    handleFilter() {\r\n      this.listQuery.page = 1\r\n      this.getSignatureList()\r\n    },\r\n    resetTemp() {\r\n      this.depart.id=''\r\n      this.depart.name=''\r\n      this.depart.code=''\r\n      this.depart.type=''\r\n      this.depart.state=''\r\n    },\r\n    formatJson(filterVal, jsonData) {\r\n      return jsonData.map(v => filterVal.map(j => {\r\n        if (j === 'timestamp') {\r\n          return parseTime(v[j])\r\n        } else {\r\n          return v[j]\r\n        }\r\n      }))\r\n    },\r\n    changedep(val){\r\n      this.deplistref=val;\r\n    }\r\n  }\r\n}\r\n",null]}