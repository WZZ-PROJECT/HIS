{"remainingRequest":"F:\\XM\\his-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\XM\\his-web\\src\\views\\technology\\upload.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\XM\\his-web\\src\\views\\technology\\upload.vue","mtime":1601008410137},{"path":"F:\\XM\\his-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1600936410370},{"path":"F:\\XM\\his-web\\node_modules\\babel-loader\\lib\\index.js","mtime":1600936408645},{"path":"F:\\XM\\his-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1600936410370},{"path":"F:\\XM\\his-web\\node_modules\\vue-loader\\lib\\index.js","mtime":1600936442292}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {policy,uploadResult} from '@/api/upload'\n\nexport default {\n  props:['uploadpatient'],\n  name: 'Upload',\n  data() {\n    return {\n      checkResult:'',\n      color: '#1890ff',\n      dialogVisible: false,\n      listObj: {},\n      arr:[],\n      fileList: [],\n      dataObj: {\n        policy: '',\n        signature: '',\n        key: '',\n        ossaccessKeyId: '',\n        dir: '',\n        host: ''\n      }\n    }\n  },\n  watch:{\n  'uploadpatient' : function(newVal, oldVal){\n      this.uploadpatient = newVal\n    },\n  },\n  created(){\n    policy().then(res=>{\n      this.dataObj = res.data\n    })\n  },\n  methods: {\n    uploadResult(){\n      let data = {}\n      data.id = this.uploadpatient\n      data.executeStaffId = this.$store.getters.id\n      data.checkResult = this.checkResult\n      data.resultImgUrlList = ''\n      this.arr.forEach(item=>{\n        data.resultImgUrlList += (item.url+',')\n      })\n      data.resultImgUrlList = data.resultImgUrlList.substr(0,data.resultImgUrlList.length-1)\n      uploadResult(data).then(res=>{\n        this.$notify({\n          title: '成功',\n          message: res.message,\n          type: 'success',\n          duration: 2000\n        })\n        console.log(8921)\n        this.$emit('reflect')\n        console.log(666312)\n      })\n    },\n    checkAllSuccess() {\n      return Object.keys(this.listObj).every(item => this.listObj[item].hasSuccess)\n    },\n    handleSubmit() {\n      const arr = Object.keys(this.listObj).map(v => this.listObj[v])\n      if (!this.checkAllSuccess()) {\n        this.$message('请等待所有图片上传成功 或 出现了网络问题，请刷新页面重新上传！')\n        return\n      }\n      this.arr = arr\n      this.dialogVisible = false;\n      this.reflect()\n    },\n    handleSuccess(response, file) {\n      const uid = file.uid;\n      const objKeyArr = Object.keys(this.listObj)\n      for (let i = 0, len = objKeyArr.length; i < len; i++) {\n        if (this.listObj[objKeyArr[i]].uid === uid) {\n          this.listObj[objKeyArr[i]].url = this.dataObj.host + '/' + this.dataObj.dir + '/' + file.name;\n          this.listObj[objKeyArr[i]].hasSuccess = true;\n          return\n        }\n      }\n      this.$notify({\n          title: '成功',\n          message: '上传成功222',\n          type: 'success',\n          duration: 2000\n        })\n    },\n    handleRemove(file) {\n      const uid = file.uid;\n      const objKeyArr = Object.keys(this.listObj);\n      for (let i = 0, len = objKeyArr.length; i < len; i++) {\n        if (this.listObj[objKeyArr[i]].uid === uid) {\n          delete this.listObj[objKeyArr[i]];\n          return\n        }\n      }\n    },\n    beforeUpload(file) {\n      const _self = this\n      const fileName = file.uid;\n      this.listObj[fileName] = {};\n      return new Promise((resolve, reject) => {\n        policy().then(response => {\n          _self.dataObj.policy = response.data.policy;\n          _self.dataObj.signature = response.data.signature;\n          _self.dataObj.ossaccessKeyId = response.data.accessKeyId;\n          _self.dataObj.key = response.data.dir + '/${filename}';\n          _self.dataObj.dir = response.data.dir;\n          _self.dataObj.host = response.data.host;\n          _self.listObj[fileName] = {hasSuccess: false, uid: file.uid, width: this.width, height: this.height};\n          resolve(true)\n        }).catch(err => {\n\n          reject(false)\n        })\n      })\n    }\n  }\n}\n",null]}